import 'dart:io';
import 'dart:math' show Random;

String _template = '''
// GENERATED FILE    DO NOT CHANGE MANUALLY     SEE tools/test_builder.dart

part of mod97_tests;

/// These tests are generated by test_builder.dart.
void testGenerated() {
GROUPS_HERE
}
''';

String _groupTemplate = '''
  group('GROUP_DESC_HERE', () {
TESTS_HERE
  });
''';

String _testTemplate = '''
    test('TEST_DESC_HERE', () {
      expect(mod97('NUMBER_HERE'), EXPECTED_HERE);
    });
''';

Random _rand = new Random();
String _buildRandNumber(int length) {
  var sb = new StringBuffer();
  for (int i = 0; i < length; i++) {
    sb.write(_rand.nextInt(10));
  }
  return sb.toString();
}

int main(List<String> args) {
  String out = 'test/mod97_generated_tests.dart';
  if (args.isNotEmpty) {
    if (args[0] == '-h' || args[0] == '--help') {
      print('Generates mod97 tests in $out.');
      print('If an argument (other than -h or --help) is given, it is used as output-file.');
      return 0;
    }
    out = args[0];
  }

  var sb = new StringBuffer();
  for (int i = 1; i < 100; i++) {
    var groupDesc = 'Calculate mod97 for numbers with the lengh: $i';
    var sbTests = new StringBuffer();
    for (int j = 0; j < 100; j++) {
      final testDesc = 'Mod97 for a random positive number with length $i is calculated correctly. (${j + 1})';

      final testNumber = _buildRandNumber(i);
      final mod97Res = int.parse(testNumber) % 97;
      sbTests.write(_testTemplate
          .replaceFirst('NUMBER_HERE', testNumber)
          .replaceFirst('EXPECTED_HERE', '$mod97Res')
          .replaceFirst('TEST_DESC_HERE', testDesc));
    }
    sb.write(_groupTemplate.replaceFirst('GROUP_DESC_HERE', groupDesc).replaceFirst('TESTS_HERE', sbTests.toString()));
  }

  var outFile = new File(out);
  outFile.writeAsStringSync(_template.replaceFirst('GROUPS_HERE', sb.toString()));

  return 0;
}
